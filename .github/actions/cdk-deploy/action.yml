name: Deploy features-api

inputs:
  env_aws_secret_name:
    required: true
    type: string
  script_path:
    type: string
  dir:
    required: false
    type: string
    default: "."

runs:
  using: "composite"
  steps:

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Set up Python
      uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: |
          ${{ inputs.dir }}/requirements.txt

    - name: Setup Node
      uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e4 #v4.3.0
      with:
        node-version: 20

    - uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

    - name: Install CDK
      shell: bash
      run: npm install -g aws-cdk@2

    - uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
      with:
        path: ${{ env.pythonLocation }}
        key:  ${{ env.pythonLocation }}-${{ hashFiles('${{ inputs.dir }}/requirements.txt') }}

    - name: Install python dependencies
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install boto3

    - name: Launch services
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: docker compose up --build -d

    - name: Sleep for 10 seconds
      run: sleep 10s
      shell: bash
      working-directory: ${{ inputs.dir }}

    - name: Stop services
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        docker compose down --rmi all --volumes
        sudo rm -rf .pgdata

    - name: Get relevant environment configuration from aws secrets
      shell: bash
      working-directory: ${{ inputs.dir }}
      env:
        AWS_DEFAULT_REGION: us-west-2
      run: |
        if [ -z "${{ inputs.script_path }}" ]
          then
            ./scripts/sync-env-local.sh ${{ inputs.env_aws_secret_name }}
          else
            python ${{ inputs.script_path }} --secret-id ${{ inputs.env_aws_secret_name }}
        fi

    - name: Deploy
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        echo $STAGE
        cdk deploy --require-approval never --outputs-file ${HOME}/cdk-outputs.json
